language: cpp
compiler: gcc
sudo: required
dist: bionic
git:
  depth: 3

addons:
  apt:
    packages:
      - p7zip-full
      - ninja-build
      - libhunspell-dev
      - libgl1-mesa-dev
      - libgstreamer-plugins-base1.0-0
      - libpulse-mainloop-glib0
      - libxkbcommon-x11-0
      - libxcb-glx0
      - libxcb-keysyms1
      - libxcb-image0
      - libxcb-shm0
      - libxcb-icccm4
      - libxcb-sync1
      - libxcb-xfixes0
      - libxcb-shape0
      - libxcb-randr0
      - libxcb-render-util0
      - libxcb-xinerama0
      - python3-pip
      - python3-setuptools
  homebrew:
    update: true
    packages:
      - p7zip
      - ninja
      - hunspell

env:
  global:
    - QT_VERSION=5.15.1
    - PYTHON_VERSION=3.8.6
    - PyQt5_VERSION=5.15.1
    - QTWEBKIT_BRANCH=5.212
    - QTWEBKIT_BUILD_NUMBER=1600797502
    - QT_INSTALL_DIR=~/Qt
    - QT_MODULES="qtbase qtdeclarative qtlocation qtmultimedia qtsensors qtwebchannel qtsvg qtxmlpatterns qttools"
    - HOST_N_CORES=2
    - INSTALL_FILE_CHECKER_ARGS="--icu_version=65 --version=${QTWEBKIT_BRANCH}.0 --template=QtBinaryChecklist.txt --verbose"
    - secure: "Y8oBFMmP/N4qFAsCW7an9G7k7dzwdfgUJwVAI7iXTipK9xBCTmacGrE8qe+A+XdSg4LVB7hgroAh8D3LVihbETfS7eFDUJWDHqAXBp4mf7eLqEJyZRLAQnJycrLBjzUd9pHzkFaNr9kntMsThkysvGEohrsD8qPcwNE8LNleV4vlJmCoAIxvPPqiFI+7wG7Wy825SCT1JQg+owr3XeW4Fm9novPzNJXMtNq+NykuDchW0yBvyDYOtev90lsidKdLc4hRNWalW+BxvoKeyzgcLCwXqeKzEx0XZdvYc5kjp3xP3sngDjio9Gp0MrniAEr3FOrx37kc6Rfaas7RL4ybkVJgxSfzEQ4Z71a9Frcm65QuJ1AIDW08HIP/5VMeABv+XBupkXobJiAtUgEyVkUq4Wm+xSrMb6K+gkGhDuBe0uUTxhGtneH5c14m2t67Iaq1UpItLAI2FW/aSBTvNDHOH6itKVIHJ8zkEw/IoKP4K0E4oMMPgBMuaYqv7YDTO2PEDzMWNhW5oQTTNumMpLdsf2bhcZ8St1JvVNIZn3m9MlmDMxR93BO5qg/0rLPfMucOk3l6suDELhT3NxMINGfoc+s7mZZkmjh5wt1n2LgzraK7hfhAPRc6IQCpA14tBBOUKRam7gscEo8YKuIAxEW9V2DzayzoolVMJZK57W97JlM="

before_deploy:
  - sed -ie "s|TRAVIS_BUILD_NUMBER|${TRAVIS_BUILD_NUMBER}|" bintray.json

deploy:
  provider: bintray
  user: annulen
  file: bintray.json
  edge: true # opt in to dpl v2
  on:
    condition: $DEPLOY = 1

after_deploy:
  - ./bintray_upload.sh qa-*.7z

matrix:
  include:
  - name: "macOS x86_64"
    os: osx
    osx_image: xcode10.1
    env:
      CMAKE_GENERATOR=Ninja
      DEPLOY=1
      TOOLCHAIN=clang_64
    install:
      - pip3 install requests semantic_version lxml jinja2
      - python3 3rdparty/qt-downloader macos desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --modules ${QT_MODULES} qtmacextras
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/clang_64"
      - export QT_QPA_PLATFORM_PLUGIN_PATH=$QTDIR/plugins
      - export PATH="$QTDIR/bin:$PATH"
      - ls 3rdparty
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit MacOS_10_13-Clang-MacOS-MacOS_10_13-X86_64
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - ./installed-files-checker.py --os=macos --install_prefix=${QTDIR} --release ${INSTALL_FILE_CHECKER_ARGS}
    script:
      - ./build-pyqt5.sh
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-macOS-x86_64.7z
  - name: "VS 2019 x86"
    os: windows
    env:
      CMAKE_GENERATOR="Visual Studio 16 2019"
      CMAKE_ARGS="-A Win32"
      QT_INSTALL_DIR=C:/Qt
      DEPLOY=1
      TOOLCHAIN=win32_msvc2019
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install visualstudio2019community --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
      - choco install jom innosetup
      - choco install python --version=$PYTHON_VERSION
      - py -m pip install requests semantic_version lxml jinja2
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --modules ${QT_MODULES} qtwinextras --openssl
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/msvc2019"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - export OPENSSL_PREFIX="${QT_INSTALL_DIR}/Tools/OpenSSL/Win_x86/bin"
      - export OTTER_DEPLOY_ARGS="--extra-libs ${OPENSSL_PREFIX}/libssl-1_1.dll ${OPENSSL_PREFIX}/libcrypto-1_1.dll"
      - ./install-qtwebkit Windows_10-MSVC2019-Windows-Windows_10-X86
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - py installed-files-checker.py --os=windows --toolchain=msvc --install_prefix=${QTDIR} --release --debug ${INSTALL_FILE_CHECKER_ARGS}
    script:
      - ./build-otter.sh
      - VS_ARCH=x86 ./build-phantomjs-vs.bat
      - VS_ARCH=x86 ./build-examples-vs.bat
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-msvc2019-x86.7z
  - name: "VS 2019 x86_64"
    os: windows
    env:
      CMAKE_GENERATOR="Visual Studio 16 2019"
      CMAKE_ARGS="-A x64"
      QT_INSTALL_DIR=C:/Qt
      DEPLOY=1
      TOOLCHAIN=win64_msvc2019_64
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install visualstudio2019community --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
      - choco install jom innosetup
      - choco install python --version=$PYTHON_VERSION
      - py -m pip install requests semantic_version lxml jinja2
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --modules ${QT_MODULES} qtwinextras --openssl
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/msvc2019_64"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - export OPENSSL_PREFIX="${QT_INSTALL_DIR}/Tools/OpenSSL/Win_x64/bin"
      - export OTTER_DEPLOY_ARGS="--extra-libs ${OPENSSL_PREFIX}/libssl-1_1-x64.dll ${OPENSSL_PREFIX}/libcrypto-1_1-x64.dll"
      - ./install-qtwebkit Windows_10-MSVC2019-Windows-Windows_10-X86_64
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - py installed-files-checker.py --os=windows --toolchain=msvc --install_prefix=${QTDIR} --release --debug ${INSTALL_FILE_CHECKER_ARGS}
    script:
      - ./build-otter.sh
      - VS_ARCH=amd64 ./build-phantomjs-vs.bat
      - VS_ARCH=amd64 ./build-examples-vs.bat
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-msvc2019-x86_64.7z
  - name: "MinGW 8.1 x86"
    os: windows
    env:
      CMAKE_GENERATOR="MSYS Makefiles"
      CMAKE_ARGS="-DCMAKE_MAKE_PROGRAM=mingw32-make"
      QT_INSTALL_DIR=C:/Qt
      MAKE=mingw32-make
      DEPLOY=1
      TOOLCHAIN=win32_mingw81
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install innosetup
      - choco install python --version=$PYTHON_VERSION
      - py -m pip install requests semantic_version lxml jinja2
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --modules ${QT_MODULES} qtwinextras --mingw --openssl
      - ls -R ${QT_INSTALL_DIR}/Tools/
      - export PATH="$(cygpath -u ${QT_INSTALL_DIR})/Tools/mingw810_32/bin:$PATH"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/mingw81_32"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - export OPENSSL_PREFIX="${QT_INSTALL_DIR}/Tools/OpenSSL/Win_x86/bin"
      - export OTTER_DEPLOY_ARGS="--extra-libs ${OPENSSL_PREFIX}/libssl-1_1.dll ${OPENSSL_PREFIX}/libcrypto-1_1.dll"
      - ./install-qtwebkit Windows_7-Mingw-Windows-Windows_7-X86
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - g++ -v
      - mingw32-make --version
      - py installed-files-checker.py --os=windows --toolchain=mingw --install_prefix=${QTDIR} --release ${INSTALL_FILE_CHECKER_ARGS}
    script:
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-mingw81-x86.7z
  - name: "Linux x86_64"
    os: linux
    env:
      CMAKE_GENERATOR=Ninja
      DEPLOY=1
      TOOLCHAIN=gcc_64
    install:
      - pip3 install requests semantic_version lxml jinja2
      - python3 3rdparty/qt-downloader linux desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --modules ${QT_MODULES} icu
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/${TOOLCHAIN}"
      - export QT_QPA_PLATFORM_PLUGIN_PATH=$QTDIR/plugins
      - export PATH="$QTDIR/bin:$PATH"
      - export LD_LIBRARY_PATH=$QTDIR/lib
      - ls 3rdparty
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64
      - rm $QTDIR/plugins/position/libqtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - ./installed-files-checker.py --os=linux --release --qt_install_header=${QTDIR}/include --qt_install_libs=${QTDIR}/lib --qt_install_archdata=${QTDIR} --qt_install_libexecs=${QTDIR}/libexec ${INSTALL_FILE_CHECKER_ARGS}
    script:
      - ./build-pyqt5.sh
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-linux-x86_64.7z
